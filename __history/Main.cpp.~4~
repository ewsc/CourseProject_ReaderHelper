//---------------------------------------------------------------------------

#include <vcl.h>
#include <windows.h>
#pragma hdrstop
#include <ShlObj.h>
#include <string>
#include <direct.h>
#include <sys/stat.h>
#include <filesystem>
#include <iostream>
#include <fstream>

#include "Main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "AdvSmoothGauge"
#pragma link "AdvSmoothProgressBar"
#pragma link "AdvProgr"
#pragma link "AdvCircularProgress"
#pragma link "AdvProgressBar"
#pragma resource "*.dfm"
#pragma comment(lib, "shell32.lib")

using namespace std;
namespace fs = std::filesystem;

const string mainFolder = "readerdata";
const string logFile = "logs.readerdata";

TMainForm *MainForm;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

void createLogFile() {
	ofstream MyFile(mainFolder + "\\" + logFile);
	MyFile << "Files can be tricky, but it is fun enough!";
    MyFile.close();
}

bool createAppFiles() {

	bool isFirstLaunch;

	struct stat sb;
	fs::path filepath = string(mainFolder + "\\" + logFile);
	bool filepathExists = fs::is_directory(filepath.parent_path());
	if (filepathExists) {
		isFirstLaunch = false;
	}
	else {
		isFirstLaunch = true;
		fs::create_directory(mainFolder);
		createLogFile();
	}
	return isFirstLaunch;
}

void __fastcall TMainForm::FormCreate(TObject *Sender)
{
   bool isFirstLaunch = createAppFiles();
}
//---------------------------------------------------------------------------

